// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  username  String   @unique
  password  String
  role      String
  updatedAt DateTime @updatedAt
  createdAt DateTime @default(now())

  session          Session[]
  alokasiCreatedBy Allocations[] @relation("createdByRelation")
  alokasiUpdatedBy Allocations[] @relation("updatedByRelation")

  lpgCreatedBy LpgDistributions[] @relation("lpgCreatedByRelation")
  lpgUpdatedBy LpgDistributions[] @relation("lpgUpdatedByRelation")

  agentCreatedBy Agents[] @relation("agentCreatedByRelation")
  agentUpdatedBy Agents[] @relation("agentUpdatedByRelation")

  companiesCreatedBy Companies[] @relation("companiesCreatedByRelation")
  companiesUpdatedBy Companies[] @relation("companiesUpdatedByRelation")
}

model Session {
  id        String   @id
  userId    String
  expiresAt DateTime
  user      User     @relation(fields: [userId], references: [id])
}

model Companies {
  id          Int      @id
  companyName String
  address     String
  telephone   String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  createdBy   String
  updatedBy   String
  agent       Agents[]

  creator User @relation("companiesCreatedByRelation", fields: [createdBy], references: [id])
  updater User @relation("companiesUpdatedByRelation", fields: [updatedBy], references: [id])
}

model Agents {
  id               String             @id
  CompanyId        Int
  agentId          String
  agentName        String
  address          String
  city             String
  phone            String
  fax              String
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
  createdBy        String
  updatedBy        String
  allocations      Allocations[]
  lpgDistributions LpgDistributions[]

  Companies Companies @relation(fields: [CompanyId], references: [id])
  creator   User      @relation("agentCreatedByRelation", fields: [createdBy], references: [id])
  updater   User      @relation("agentUpdatedByRelation", fields: [updatedBy], references: [id])
}

model Allocations {
  id              Int               @id @default(autoincrement())
  giDate          DateTime?
  bpeNumber       String?
  deliveryNumber  String
  agentId         String?
  shipTo          String
  materialName    String
  agentName       String
  plannedGiDate   String
  period          String?
  allocatedQty    Int
  status          String            @default("Pending")
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  createdBy       String
  updatedBy       String
  lpgDistribution LpgDistributions?
  Agent           Agents?           @relation(fields: [agentId], references: [id])
  creator         User              @relation("createdByRelation", fields: [createdBy], references: [id])
  updater         User              @relation("updatedByRelation", fields: [updatedBy], references: [id])
}

model LpgDistributions {
  id             Int         @id
  allocationId   Int         @unique
  devlieryNumber String
  bpeNumber      String
  giDate         DateTime
  shipTo         String
  agentName      String
  licensePlate   String
  doNumber       String      @unique
  allocatedQty   Int
  driverName     String
  volume         Decimal
  bocor          Int?
  isiKurang      Int?
  status         String
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt
  createdBy      String
  updatedBy      String
  Agents         Agents      @relation(fields: [shipTo], references: [id])
  allocation     Allocations @relation(fields: [allocationId], references: [id])
  creator        User        @relation("lpgCreatedByRelation", fields: [createdBy], references: [id])
  updater        User        @relation("lpgUpdatedByRelation", fields: [updatedBy], references: [id])
}

model RawData {
  no            Int       @id
  plant         Int
  shipTo        String
  shipToName    String
  doNumber      String
  quantity      Int
  uom           String
  doStatus      String
  material      String
  materialName  String
  plannedGiDate String
  giDate        DateTime?
  bpe           String?
  updatedAt     DateTime  @updatedAt
  createdAt     DateTime  @default(now())
}
